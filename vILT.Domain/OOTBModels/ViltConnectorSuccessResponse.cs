/*
 * VILT Connector
 *
 * Edge virtual Instructor Led Training (vILT) API Template. Use this template to help generate your API contracts so that you can connect with CSOD and become a vILT provider. Detailed in this API are endpoints that should be implemented so that the contract can adhere to Edge vILT Provider standards.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;


namespace vILT.Domain
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ViltConnectorSuccessResponse : IEquatable<ViltConnectorSuccessResponse>
    { 
        /// <summary>
        /// Only accepted value is &#39;Success&#39; for HTTP 200 responses.
        /// </summary>
        /// <value>Only accepted value is &#39;Success&#39; for HTTP 200 responses.</value>
        [Required]
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Ideally should match the unique identifier included in the request from Cornerstone. Useful for debugging purposes.
        /// </summary>
        /// <value>Ideally should match the unique identifier included in the request from Cornerstone. Useful for debugging purposes.</value>
        [DataMember(Name="correlationId")]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Date and time of the response in UTC. Format expected is YYYY-MM-DDTHH:mm:ss.SSS+00:00.
        /// </summary>
        /// <value>Date and time of the response in UTC. Format expected is YYYY-MM-DDTHH:mm:ss.SSS+00:00.</value>
        [DataMember(Name="timestamp")]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ViltConnectorSuccessResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        //public string ToJson()
        //{
        //    //return JsonConvert.SerializeObject(this, Formatting.Indented);
        //}

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ViltConnectorSuccessResponse)obj);
        }

        /// <summary>
        /// Returns true if ViltConnectorSuccessResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ViltConnectorSuccessResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ViltConnectorSuccessResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    CorrelationId == other.CorrelationId ||
                    CorrelationId != null &&
                    CorrelationId.Equals(other.CorrelationId)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (CorrelationId != null)
                    hashCode = hashCode * 59 + CorrelationId.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ViltConnectorSuccessResponse left, ViltConnectorSuccessResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ViltConnectorSuccessResponse left, ViltConnectorSuccessResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
