/*
 * VILT Connector
 *
 * Edge virtual Instructor Led Training (vILT) API Template. Use this template to help generate your API contracts so that you can connect with CSOD and become a vILT provider. Detailed in this API are endpoints that should be implemented so that the contract can adhere to Edge vILT Provider standards.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
//

namespace vILT.Domain
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SessionRequest : IEquatable<SessionRequest>
    { 
        /// <summary>
        /// Email address of the person creating the session.
        /// </summary>
        /// <value>Email address of the person creating the session.</value>
        [Required]
        [DataMember(Name="CreatorEmail")]
        public string CreatorEmail { get; set; }

        /// <summary>
        /// Title of the session. Maximum length &#x3D; 50 characters.
        /// </summary>
        /// <value>Title of the session. Maximum length &#x3D; 50 characters.</value>
        [Required]
        [DataMember(Name="Title")]
        public string Title { get; set; }

        /// <summary>
        /// Description of the session. Maximum length &#x3D; 100 characters.
        /// </summary>
        /// <value>Description of the session. Maximum length &#x3D; 100 characters.</value>
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Start date and time of the session in UTC. Format is YYYY-MM-DDTHH:MM:SS.
        /// </summary>
        /// <value>Start date and time of the session in UTC. Format is YYYY-MM-DDTHH:MM:SS.</value>
        [Required]
        [DataMember(Name="DateBegin")]
        public string DateBegin { get; set; }

        /// <summary>
        /// End date and time of the session in UTC. Format is YYYY-MM-DDTHH:MM:SS.
        /// </summary>
        /// <value>End date and time of the session in UTC. Format is YYYY-MM-DDTHH:MM:SS.</value>
        [Required]
        [DataMember(Name="DateEnd")]
        public string DateEnd { get; set; }

        /// <summary>
        /// Gets or Sets TimeZone
        /// </summary>
        [Required]
        [DataMember(Name="TimeZone")]
        public TimeZone TimeZone { get; set; }

        /// <summary>
        /// Unique ID for the session generated by Cornerstone. This ID is referenced in subsequent workflows by Cornerstone must be saved in the virtual meeting provider&#39;s system.
        /// </summary>
        /// <value>Unique ID for the session generated by Cornerstone. This ID is referenced in subsequent workflows by Cornerstone must be saved in the virtual meeting provider&#39;s system.</value>
        [Required]
        [DataMember(Name="SessionId")]
        public string SessionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionRequest {\n");
            sb.Append("  CreatorEmail: ").Append(CreatorEmail).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DateBegin: ").Append(DateBegin).Append("\n");
            sb.Append("  DateEnd: ").Append(DateEnd).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        //public string ToJson()
        //{
        //    //return JsonConvert.SerializeObject(this, Formatting.Indented);
        //}

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SessionRequest)obj);
        }

        /// <summary>
        /// Returns true if SessionRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SessionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CreatorEmail == other.CreatorEmail ||
                    CreatorEmail != null &&
                    CreatorEmail.Equals(other.CreatorEmail)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DateBegin == other.DateBegin ||
                    DateBegin != null &&
                    DateBegin.Equals(other.DateBegin)
                ) && 
                (
                    DateEnd == other.DateEnd ||
                    DateEnd != null &&
                    DateEnd.Equals(other.DateEnd)
                ) && 
                (
                    TimeZone == other.TimeZone ||
                    TimeZone != null &&
                    TimeZone.Equals(other.TimeZone)
                ) && 
                (
                    SessionId == other.SessionId ||
                    SessionId != null &&
                    SessionId.Equals(other.SessionId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CreatorEmail != null)
                    hashCode = hashCode * 59 + CreatorEmail.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DateBegin != null)
                    hashCode = hashCode * 59 + DateBegin.GetHashCode();
                    if (DateEnd != null)
                    hashCode = hashCode * 59 + DateEnd.GetHashCode();
                    if (TimeZone != null)
                    hashCode = hashCode * 59 + TimeZone.GetHashCode();
                    if (SessionId != null)
                    hashCode = hashCode * 59 + SessionId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SessionRequest left, SessionRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SessionRequest left, SessionRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
